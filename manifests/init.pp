# == Defined Type: kickstart
#
#   This type can be used to generate a kickstart file using the Puppet DSL.
#
# === Parameters:
# [*ensure*]
#   Manage state of the configuration file.  Valid values are 'present'|'absent', and
#   will default to present.  If marked absent, the configuration file will be deleted.
# [*filename*]
#   Namevar. String. The path to the kickstart file generated by this resource.
# [*commands*]
#   Hash. A hash of commands with arguments as the value. Arguments can be an
#   array. Each argument will be printed on a newline prefaced by the command.
#   For example:
#
#     kickstart { '/tmp/kickstart.ks':
#       commands => {
#         part => [
#           '/boot --ondisk sda --size 128 --fstype ext3',
#           'pv.01 --size 1 --ondisk sda --grow',
#         ]
#       }
#     }
#
#   Would result in:
#
#     part /boot --ondisk sda --size 128 --fstype ext3
#     part pv.01 --size 1 --ondisk sda --grow
#
# [*repos*]
#   Hash. A hash of yum repositories to be used in the kickstart. The key should
#   be the name of the repository while the value should be a hash of arguments
#   to the Kickstart 'repo' command.
#
#   Example:
#
#     kickstart { '/tmp/kickstart.ks':
#       repos => {
#         base => {
#           baseurl => 'http://mirrors.kernel.org/centos/7/os/x86_64/'
#         }
#       }
#     }
#
# [*packages*]
#   Array. An array of package names.
#   Hash. A hash containing package options, and also the package list
#
#   Example: As Array
#
#   kickstart { '/var/www/html/kickstart.cfg':
#     packages => [
#       '@base',
#       'redhat-lsb',
#       'apache',
#       'mariadb-server',
#       'nagios-nrpe'
#     ]
#   }
#
#   Example: As Hash
#
#   kickstart { '/var/www/html/kickstart.cfg':
#     packages => {
#       'options' => '--nobase',
#       'package_list' => [
#         '@core',
#       ]
#     }
#   }
#                                                 }
# [*partition_configuration*]
#   Hash. A separate section to define your partition configuration. This
#   follows the same rules as the 'commands' parameter.
# [*fragments*]
#   Hash. An hash of fragments to be evaluated in the template. These are
#   passed as an argument to the `template` function. The hash must have the
#   section name ('pre', 'post') as the key, and an array of paths to ERB
#   templates as the value. Fragments can access the data passed to the
#   $fragment_variables parameter using the instance variable
#   @fragment_variables inside the template.
#
#   Example:
#
#     kickstart { '/tmp/kickstart.ks':
#       fragments => {
#         'post' => [
#           'kickstart_profile/configure_network.erb',
#           'kickstart_profile/install_puppet.erb'
#         ]
#       }
#     }
#
# [*fragment_variables*]
#   Hash. A hash of settings to be consumed by your fragment templates.
# [*addons*]
#   Hash. A separate section to define any addons. This
#   follows the same rules as the 'commands' parameter.
#
#   Example:
#     kickstart { '/var/www/html/kickstart.cfg':
#       addons => {
#         'my_addon_name --arg1 --arg2="value2"' => ['example1','example2','example3'],
#         'my_other_addon' => [],
#       }
#     }
# [*template*]
#   String. A path to an ERB template to use for the kickstart file.
# [*fail_on_unsupported_commands*]
#   Boolean. Raises an error for commands in the $commands hash if set to true,
#   only warns if set to false.
define kickstart (
  Hash $commands,
  Variant[Hash,Array[String]] $packages,
  Enum['present','absent'] $ensure      = 'present',
  String $filename                      = $title,
  Hash $repos                           = {},
  Hash $partition_configuration         = {},
  Hash $fragments                       = {},
  Hash $fragment_variables              = {},
  Hash $addons                          = {},
  String $template                      = 'kickstart/kickstart.erb',
  Boolean $fail_on_unsupported_commands = true,
) {

  $valid_commands = [
    auth,
    authconfig,
    autopart,
    autostep,
    bootloader,
    btrfs,
    clearpart,
    cmdline,
    device,
    dmraid,
    driverdisk,
    eula,
    fcoe,
    firewall,
    firstboot,
    group,
    graphical,
    halt,
    ignoredisk,
    install,
    cdrom,
    harddrive,
    liveimg,
    nfs,
    url,
    iscsi,
    iscsiname,
    keyboard,
    lang,
    logvol,
    logging,
    mediacheck,
    monitor,
    multipath,
    network,
    part,
    partition,
    poweroff,
    raid,
    realm,
    reboot,
    repo,
    rescue,
    rootpw,
    selinux,
    services,
    shutdown,
    sshkey,
    sshpw,
    skipx,
    syspurpose,
    text,
    timezone,
    updates,
    upgrade,
    user,
    vnc,
    volgroup,
    xconfig,
    zerombr,
    zfcp,
    '%include',
    '%ksappend'
  ]

  if $commands and ! empty($commands) {
    $unsupported_commands = difference(keys($commands), $valid_commands)

    if $unsupported_commands and ! empty($unsupported_commands) {
      $ks_error_message = "Unsupported Kickstart commands: ${unsupported_commands}"
      if $fail_on_unsupported_commands { fail $ks_error_message } else { warning $ks_error_message }
    }
  }

  if $partition_configuration and ! empty($partition_configuration) {
    $unsupported_partition_config = difference(keys($partition_configuration), $valid_commands)

    if $unsupported_commands and ! empty($unsupported_partition_config) {
      $part_error_message = "Unsupported Partition commands: ${unsupported_partition_config}"
      if $fail_on_unsupported_commands { fail $part_error_message } else { warning $part_error_message }
    }
  }

  file { $filename:
    ensure  => $ensure,
    content => template($template),
  }

}
